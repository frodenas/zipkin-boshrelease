/*
 * Copyright 2012 Twitter Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
<%
def openstruct_to_hash(os)
  os.marshal_dump.map do |key, element|
    element.is_a?(OpenStruct) ? { key => openstruct_to_hash(element) } : { key => element }
  end.reduce(&:merge)
end

networks = openstruct_to_hash(spec.networks)
default_network = networks.values.find { |net| net.has_key?(:default) }
private_ip = default_network[:ip]

vip_network = networks.values.find { |net| net[:type] == 'vip' }
public_ip = vip_network.nil? ? private_ip : vip_network[:ip]
%>

import com.twitter.app.App
import com.twitter.finagle.builder.ClientBuilder
import com.twitter.finagle.redis.{Client, Redis}
import com.twitter.logging._
import com.twitter.zipkin.builder.{QueryServiceBuilder, ZipkinServerBuilder}
import com.twitter.zipkin.cassandra
import com.twitter.zipkin.cassandra.CassandraSpanStoreFactory
import com.twitter.zipkin.redis
import com.twitter.zipkin.storage.Store
import java.net.InetAddress

<% if p('zipkin.store') == 'cassandra' %>
object Factory extends App with CassandraSpanStoreFactory
Factory.cassandraDest.parse("<%= p('cassandra.servers').map { |server| "#{server}:#{p('cassandra.cql_port')}" }.join(',') %>")
val cluster = Factory.createClusterBuilder().build()
val storeBuilder = Store.Builder(cassandra.SpanStoreBuilder(cluster))
<% end %>

<% if p('zipkin.store') == 'redis' %>
val client = Client(ClientBuilder().hosts("<%= p('redis.address') %>:<%= p('redis.port') %>")
                                   .hostConnectionLimit(40)
                                   .hostConnectionCoresize(20)
                                   .codec(Redis())
                                   .build())
val storeBuilder = Store.Builder(redis.SpanStoreBuilder(client))
<% end %>

val loggers = List(LoggerFactory(level = Some(Level.<%= p('zipkin.query.loglevel') %>),
  handlers = List(FileHandler(
    filename = "/var/vcap/sys/log/zipkin_query/zipkin_query.log",
    rollPolicy = Policy.<%= p('zipkin.query.logrotate.frequency') %>,
    append = true,
    rotateCount = <%= p('zipkin.query.logrotate.rotate') %>
  ))
))

val serverAddress = InetAddress.getByName("<%= private_ip %>")
val serverBuilder = ZipkinServerBuilder(<%= p('zipkin.query.server_port') %>, <%= p('zipkin.query.admin_port') %>, serverAddress, loggers)

QueryServiceBuilder(storeBuilder, serverBuilder)
